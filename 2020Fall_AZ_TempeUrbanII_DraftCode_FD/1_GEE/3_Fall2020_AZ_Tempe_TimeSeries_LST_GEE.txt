//SCRIPT DESCRIPTION//

/* Script: Fall2020_AZ_Tempe_TimeSeries_LST - Tempe Urban Development II - Collection and Processing by month

Authors: Blake Steiner, John Dialesandro, Anson Pang, and Sydney Boogaard 
Date: 11/3/2020
Project: Tempe Urban Development II, Fall 2020
Node: Arizona, Tempe
Contact: Blake Steiner, blake.a.steiner@gmail.com
URL: -Place custom URL here-

Description: This script was made to display a short timeseries of Land Surface Temperature
(LST) across the supplied study area / shapefile. This is a short timeseries because
longer time series crash GEE processing (for now). 

Usage: Requires access to Earth Engine Assets (Google equivalent of shapefiles) from the library: 
"users/YourUserName/ShapeFileName" which is a polygon of the study area with census tracts. 

Parameters:
In: start_year
    end_year
    save
    geography
    studyoutline

Out: CSV file and, in the console, yearly timeseries charts.

*/


//select start year
var start = '2019-04-15';

//select end year
var end = '2020-10-16';

// Do you want to save the output as .csv-file?
var save = true;

// Specify Output directory
var output_dir = 'DEVELOP_2020';

//Specify geogrpahy for naming exports
var geography = "Tempe";

// Select study outline and scale (your study area shapefile goes here after importing and renaming the asset)
var studyoutline =  tempe_ct;
print(studyoutline);

// Define visualization parameters so the images are both presented in the same way.
//var vis2 = {min:60, max:140};

// Get a color palette: a list of hex strings
var palettes = require('users/gena/packages:palettes');
print(palettes);

/////////////////////////////
//****************** CLOUD MASK FUNCTION *****************//
  
// Create a function to mask cloudy and cloud shadow pixels
// 1 corresponds to clear
// 3 corresponds to cloud shadow
// 5 corresponds to cloud
// More info on bit values for the pixel_qa band can be found at https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C01_T1_SR
var cloud_mask = function maskl8(i) { 
// This reassigns cloud shadow pixels to clear pixels
    var cloudShadowBitMask = (1 << 3); 
// This reassigns cloud pixels are to clear pixels
    var cloudsBitMask = (1 << 5); 
// This reassigns water pixels are to clear pixels
    var waterBitMask = (1 << 2);  
// Selects the pixel_qa band and sets it to a variable
    var qa = i.select('pixel_qa');
// Multiplies the bits in the original pixel_qa band by the new reassigned cloud shadow transparent bits.
    var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)      
              .and(qa.bitwiseAnd(cloudsBitMask).eq(0))
              .and(qa.bitwiseAnd(waterBitMask).eq(0));
// The cloud cover and cloud shadow pixels now have bit values of 1 = transparent
// Transparent pixels will  not be included in the further analysis
    return i.updateMask(mask);                              
}
/////////////////////////////

// set Tempe as the center 
// (x,y,zoom level)
Map.setCenter(-111.9355, 33.4075, 11)

// set date ranges

// gather images from summer months
var col = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterDate(start, end) // change "sum2017" desired date range
    .filterBounds(studyoutline) // change "tempe_ct" to desired boundary
    .map(cloud_mask) // this gets rid of cloudy images
//Map.addLayer(collection, {}, 'Collection', false)
//print(collection)


 print(" ...Calculating NDVI from Bands 5 and 4")
  // calculate ndvi
var ndvi = col.map(
  function(image){
              return image.addBands(
                image.expression(
                  // Compute Normalised difference vegetation index
                  // for more information see 
                  // https://www.usgs.gov/land-resources/nli/landsat/landsat-normalized-difference-vegetation-index?qt-science_support_page_related_con=0#qt-science_support_page_related_con
                '(NIR - RED) / (NIR + RED)', 
              { 
                'NIR': image.select('B5'),
                'RED': image.select('B4')
              }).rename('ndvi').copyProperties(image, image.propertyNames()));
          });
          


// // display
// var ndviVis = {bands: "ndvi", palette: ['red','yellow','green','003300']};
// //Map.addLayer(median_ndvi, ndviVis, "ndvi - full", false);          


print("... Scaling Band 10 (thermal)")
// Create a function to scale Band 10 to get correct brightness temperature (was condensed for storage)
  var scaled_B10 =  ndvi.map(function (image) {
    var scaledB10 = image.select('B10').multiply(0.1).rename('scaled_B10');
    //add as a new band on the image collection
    return image.addBands(scaledB10);
  });
        
//calculate median of Brightness Temperature
// var median_B10 = scaled_B10.median(); 
// print(median_B10);
//display the brightness temperature
//Map.addLayer(median_B10, {bands: "scaled_B10", min: 0, max: 150, palette: ['FF0000', '00FF00']}, "B10 - full", false);



print("... Getting emissivity from NDVI")
// calculate emissivity
var emissivity = scaled_B10.map(function(image)
          {
            return image.addBands(image.select('ndvi')
            // It looks like specific NDVI ranges have a corresponding emissivity
            // for emissivity values and equation see
            // https://www.researchgate.net/publication/222255366_A_C_program_for_retrieving_land_surface_temperature_from_the_data_of_Landsat_TMETM_band6/figures?lo=1
              .where(image.select('ndvi').lt(0), 0.9925)
              .where(image.select('ndvi').gte(0) && image.select('ndvi').lt(0.15), 0.923)
              .where(image.select('ndvi').gt(0.727), 0.986)
              .where(image.select('ndvi').gte(0.15) && image.select('ndvi').lt(0.727), 
                image.expression(
                  '1.0094 + 0.047 * log(A)',
                    {
                      'A' : image.select('ndvi')
                      //returns a new band to the image collection for emissivity
                    })).rename('emissivity').copyProperties(image, image.propertyNames()));
          }
          );

//calculate median of emissivity image collection
// var median_emis = emissivity.median();
// print(median_emis);
//add emissivity median to the map and set visual parameters
//Map.addLayer(emissivity.median(),{bands: "emissivity", min: 0.9, max: 1, palette: ['FF0000', '00FF00']}, "emissivity - full", false);




print("... Calculating LST from emissivity and thermal band")
// calculate land surface temperature
var LST = emissivity.map(function(image)
          {
            return image.addBands(
              image.expression(
                //this expresion calculates the land surface temperature in Kevlin, then converts to Farenheit
            '(A / (1 +(0.0000109 * (A / 0.01438) * log(B)))) * (9/5) - 459.67',
            {
              'A' : image.select('scaled_B10'),
              'B' : image.select('emissivity')
              //new band for land surface temperature in Farenheit added to the collection
            }).rename('LST').copyProperties(image, image.propertyNames()))});


print("... Plotting histogram of number of pixels per location")
//provides a count of LST values per pixel in the image collection          
var counts_LST = LST.select("LST").count();
print(counts_LST);
//displays that count for our study area in histogram
var histogram_LST = ui.Chart.image.histogram(counts_LST, studyoutline, 30);
print(histogram_LST);


print("... Computing median across time")
//calculates median LST for each pixel geography in the image collection
var median_LST = LST.select("LST").median();
print(median_LST);

//Double check if LST was added to collection

print(LST);

// Create palettes for display of LST
var lst_pal = ['003300','green','yellow','red'];

//palettes.kovesi.linear_green_5_95_c69[7]

// Create a time series chart.
var plotLST = ui.Chart.image.seriesByRegion(LST, studyoutline,ee.Reducer.mean(),
'LST',1,'system:time_start', 'name')
              .setChartType('LineChart').setOptions({
                title: 'LST short-term time series',
                hAxis: {title: 'Date'},
                vAxis: {title: 'LST'}
});

// Display.
print(plotLST);

// Display LST results on map
Map.addLayer(median_LST.clip(studyoutline), {min:70, max:170, palette: lst_pal}, 'LST');
