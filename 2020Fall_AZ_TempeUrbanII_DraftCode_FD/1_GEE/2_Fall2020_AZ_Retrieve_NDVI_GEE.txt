exports.NDVI_fromLandsat8 = function(DATE_RANGE, YEAR_RANGE, STUDYBOUNDS, DISPLAY){

/* Script: Fall2020_AZ_Retrieve_NDVI - Tempe Urban Development II - LST

Authors: Blake Steiner, John Dialesandro, Anson Pang, and Sydney Boogaard 
Prior Authors: Brandy Nisbet-Wilcox, Samuel Meltzer, Spencer Nelson, Charlotte Wagner
Date: November 3, 2020
Project: Tempe Urban Development II, Fall 2020
Node: Arizona, Tempe
Contact: Blake Steiner, blake.a.steiner@gmail.com
URL: -Place custom URL here-

Description: This script calculates median NDVI across a given date range and year range.
This script is FUNCTION and run from the main script Fall2020_AZ_TempeII_AggSatData.
The function requires DATE_RANGE (in the form of ee.Filter.dayOfYear(start_day_of_year, end_day_of_year)) 
YEAR_RANGE (in the form of ee.Filter.calendarRange(start_year, end_year,'year'), 
STUDYBOUNDS (a polygon of the study area saved in Google Garth Engine Assets) and 
DISPLAY (can be set to true or false) as inputs, which are specified in Fall2020_AZ_TempeII_AggSatData. 
This script calculates median NDVI across a given date range and year range and 
and was developed to calculate NDVI for census tracts located in Philadelphia, Pennsylvania, US. 
NDVI is calculated from bi-weekly Landsat 8 Surface Reflectance Tier 1 data at 30m resolution. 

Usage: Requires access to Google Earth Engine.

Parameters:
In: DATE_RANGE
    YEAR_RANGE
    STUDYBOUNDS
    DISPLAY
Out: clipped image of median NDVI

*/

//****************** CLOUD MASK FUNCTION *****************//
  
// Create a function to mask cloudy and cloud shadow pixels
// 1 corresponds to clear
// 3 corresponds to cloud shadow
// 5 corresponds to cloud
// More info on bit values for the pixel_qa band can be found at https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C01_T1_SR
var cloud_mask = function maskl8(i) { 
// This reassigns cloud shadow pixels to clear pixels
    var cloudShadowBitMask = (1 << 3); 
// This reassigns cloud pixels are to clear pixels
    var cloudsBitMask = (1 << 5); 
// This reassigns water pixels are to clear pixels
    var waterBitMask = (1 << 2);  
// Selects the pixel_qa band and sets it to a variable
    var qa = i.select('pixel_qa');
// Multiplies the bits in the original pixel_qa band by the new reassigned cloud shadow transparent bits.
    var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)      
              .and(qa.bitwiseAnd(cloudsBitMask).eq(0))
              .and(qa.bitwiseAnd(waterBitMask).eq(0));
// The cloud cover and cloud shadow pixels now have bit values of 1 = transparent
// Transparent pixels will  not be included in the further analysis
    return i.updateMask(mask);                              
}

//************* LOAD DATA FROM LANDSAT *****************//

  print("... Retrieving image collection");

// Filter landsat image collection by year and date ranges, and geography boundaries. Cloud mask applied to collection
 var collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
 .filterBounds(STUDYBOUNDS) //only images within study area
 //filter by the set variables above for day of year range and year range
 .filter(YEAR_RANGE)
 .filter(DATE_RANGE)
 // use above functions to filter cloudy pixels
  .map(cloud_mask); 
  
print(collection);



  print(" ...Calculating NDVI from Bands 5 and 4")

//*********  Calculate NDVI **************//
// calculate ndvi
var ndvi = collection.map(
  function(image){
              return image.addBands(
                image.expression(
                  // Compute Normalised difference vegetation index
                  // for more information see 
                  // https://www.usgs.gov/land-resources/nli/landsat/landsat-normalized-difference-vegetation-index?qt-science_support_page_related_con=0#qt-science_support_page_related_con
                '(NIR - RED) / (NIR + RED)', 
              { 
                'NIR': image.select('B5'),
                'RED': image.select('B4')
              }).rename('ndvi'));
          });
          
 // Make histogram of # of pixels
 print("... Plotting histogram of number of pixels per location")
// var counts_NDVI = ndvi.select("ndvi").count();
// var histogram_ndvi_counts = ui.Chart.image.histogram(counts_ndvi, STUDYBOUNDS, 30)
// print(histogram_ndvi_counts)
 var counts_NDVI = ndvi.select("ndvi").count();
 var histogram_NDVI_counts = ui.Chart.image.histogram(counts_NDVI, STUDYBOUNDS, 30)
 print(histogram_NDVI_counts)
 
// Compute median
print("... Computing median across time")
var median_ndvi = ndvi.median();


// Plot a histogram of ndvi values
print("... Plotting histogram of ndvi values")
var cndvi = median_ndvi.clip(STUDYBOUNDS)
var values_ndvi = cndvi.select('ndvi') 
var histogram_ndvi_values = ui.Chart.image.histogram(values_ndvi, STUDYBOUNDS, 30)
print(histogram_ndvi_values)
 
// Center the map on the image.
Map.centerObject(STUDYBOUNDS)

// Display median NDVI
var ndviVis = {bands: "ndvi", min: -.3, max: .9, palette: ['red','yellow','green','003300']};          
Map.addLayer(cndvi, ndviVis, "NDVI", DISPLAY)
return median_ndvi;
};